// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using environmentMonitoring.Database.Data;

#nullable disable

namespace environmentMonitoring.Database.Migrations
{
    [DbContext(typeof(EnvironmentAppDbContext))]
    partial class EnvironmentAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("environmentMonitoring.Database.Models.IncidentReports", b =>
                {
                    b.Property<int>("incident_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("incident_Id"));

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("next_steps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("r_sensor_Id")
                        .HasColumnType("int");

                    b.Property<int?>("reading_Id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("incident_Id");

                    b.HasIndex("reading_Id");

                    b.ToTable("IncidentReports");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Permission", b =>
                {
                    b.Property<int>("permission_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("permission_Id"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("permission_Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            permission_Id = 1,
                            description = "create user",
                            name = "CreateUsers"
                        },
                        new
                        {
                            permission_Id = 2,
                            description = "read users",
                            name = "ReadUsers"
                        },
                        new
                        {
                            permission_Id = 3,
                            description = "update users",
                            name = "UpdateUsers"
                        },
                        new
                        {
                            permission_Id = 4,
                            description = "delete users",
                            name = "DeleteUsers"
                        },
                        new
                        {
                            permission_Id = 5,
                            description = "create sensor",
                            name = "CreateSensors"
                        },
                        new
                        {
                            permission_Id = 6,
                            description = "read sensors",
                            name = "ReadSensors"
                        },
                        new
                        {
                            permission_Id = 7,
                            description = "update sensors",
                            name = "UpdateSensors"
                        },
                        new
                        {
                            permission_Id = 8,
                            description = "delete sensor",
                            name = "DeleteSensors"
                        },
                        new
                        {
                            permission_Id = 9,
                            description = "assign roles",
                            name = "ManageUserRoles"
                        },
                        new
                        {
                            permission_Id = 10,
                            description = "set role permissions",
                            name = "SetRolePermissions"
                        },
                        new
                        {
                            permission_Id = 11,
                            description = "create incident report",
                            name = "CreateIncidentReport"
                        },
                        new
                        {
                            permission_Id = 12,
                            description = "read incident report",
                            name = "ReadIncidentReport"
                        },
                        new
                        {
                            permission_Id = 13,
                            description = "update incident report",
                            name = "UpdateIncidentReport"
                        },
                        new
                        {
                            permission_Id = 14,
                            description = "delete incident report",
                            name = "DeleteIncidentReport"
                        });
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Quantities", b =>
                {
                    b.Property<int>("quantity_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("quantity_Id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("max_threshold")
                        .HasColumnType("real");

                    b.Property<float>("min_threshold")
                        .HasColumnType("real");

                    b.Property<string>("quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("safe_level")
                        .HasColumnType("real");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("quantity_Id");

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Readings", b =>
                {
                    b.Property<int>("reading_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reading_Id"));

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("v_sensor_id")
                        .HasColumnType("int");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("reading_Id");

                    b.HasIndex("v_sensor_id");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.RealSensor", b =>
                {
                    b.Property<int>("r_sensor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("r_sensor_Id"));

                    b.Property<float>("frequency")
                        .HasColumnType("real");

                    b.Property<float>("lat")
                        .HasColumnType("real");

                    b.Property<float>("lon")
                        .HasColumnType("real");

                    b.Property<float>("status")
                        .HasColumnType("real");

                    b.HasKey("r_sensor_Id");

                    b.ToTable("RealSensors");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Reports", b =>
                {
                    b.Property<int>("report_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("report_Id"));

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("v_sensor_id")
                        .HasColumnType("int");

                    b.HasKey("report_Id");

                    b.HasIndex("v_sensor_id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Role", b =>
                {
                    b.Property<int>("role_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_Id"));

                    b.Property<string>("role_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("role_Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            role_Id = 1,
                            role_type = "Admin"
                        },
                        new
                        {
                            role_Id = 2,
                            role_type = "Environment Scientist"
                        },
                        new
                        {
                            role_Id = 3,
                            role_type = "Operations Manager"
                        });
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.RolePermissions", b =>
                {
                    b.Property<int>("role_Id")
                        .HasColumnType("int");

                    b.Property<int>("permission_Id")
                        .HasColumnType("int");

                    b.HasKey("role_Id", "permission_Id");

                    b.HasIndex("permission_Id");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            role_Id = 1,
                            permission_Id = 1
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 2
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 3
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 4
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 5
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 6
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 7
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 8
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 9
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 10
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 11
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 12
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 13
                        },
                        new
                        {
                            role_Id = 1,
                            permission_Id = 14
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 2
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 5
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 6
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 7
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 8
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 11
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 12
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 13
                        },
                        new
                        {
                            role_Id = 2,
                            permission_Id = 14
                        },
                        new
                        {
                            role_Id = 3,
                            permission_Id = 2
                        },
                        new
                        {
                            role_Id = 3,
                            permission_Id = 6
                        },
                        new
                        {
                            role_Id = 3,
                            permission_Id = 11
                        });
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.User", b =>
                {
                    b.Property<int>("user_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_Id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role_Id")
                        .HasColumnType("int");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_Id");

                    b.HasIndex("role_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.VirtualSensor", b =>
                {
                    b.Property<int>("v_sensor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("v_sensor_Id"));

                    b.Property<string>("catergory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity_id")
                        .HasColumnType("int");

                    b.Property<int>("r_sensor_Id")
                        .HasColumnType("int");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sensor_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("v_sensor_Id");

                    b.HasIndex("quantity_id");

                    b.HasIndex("r_sensor_Id");

                    b.ToTable("VirtualSensors");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.IncidentReports", b =>
                {
                    b.HasOne("environmentMonitoring.Database.Models.RealSensor", "RealSensor")
                        .WithMany()
                        .HasForeignKey("reading_Id");

                    b.HasOne("environmentMonitoring.Database.Models.Readings", "Reading")
                        .WithMany("IncidentReports")
                        .HasForeignKey("reading_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Reading");

                    b.Navigation("RealSensor");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Readings", b =>
                {
                    b.HasOne("environmentMonitoring.Database.Models.VirtualSensor", "VirtualSensor")
                        .WithMany("Readings")
                        .HasForeignKey("v_sensor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualSensor");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Reports", b =>
                {
                    b.HasOne("environmentMonitoring.Database.Models.VirtualSensor", "VirtualSensor")
                        .WithMany("Reports")
                        .HasForeignKey("v_sensor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualSensor");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.RolePermissions", b =>
                {
                    b.HasOne("environmentMonitoring.Database.Models.Permission", "Permissions")
                        .WithMany("RolePermissions")
                        .HasForeignKey("permission_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("environmentMonitoring.Database.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.User", b =>
                {
                    b.HasOne("environmentMonitoring.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.VirtualSensor", b =>
                {
                    b.HasOne("environmentMonitoring.Database.Models.Quantities", "Quantity")
                        .WithMany("VirtualSensor")
                        .HasForeignKey("quantity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("environmentMonitoring.Database.Models.RealSensor", "RealSensor")
                        .WithMany("VirtualSensor")
                        .HasForeignKey("r_sensor_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quantity");

                    b.Navigation("RealSensor");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Quantities", b =>
                {
                    b.Navigation("VirtualSensor");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Readings", b =>
                {
                    b.Navigation("IncidentReports");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.RealSensor", b =>
                {
                    b.Navigation("VirtualSensor");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("environmentMonitoring.Database.Models.VirtualSensor", b =>
                {
                    b.Navigation("Readings");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
